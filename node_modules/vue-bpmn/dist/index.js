'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var BpmnJS = _interopDefault(require('bpmn-js/dist/bpmn-navigated-viewer.production.min.js'));

//

var script = {
  name: 'vue-bpmn',
  props: {
    url: {
      type: String,
      required: true
    }
  },
  data: function() {
    return {
      diagramXML: null
    };
  },
  mounted: function () {
    var container = this.$refs.container;

    var self = this;

    this.bpmnViewer = new BpmnJS({
      container: container
    });

    this.bpmnViewer.on('import.done', function(event) {

      var error = event.error;
      var warnings = event.warnings;

      if (error) {
        self.$emit('error', error);
      } else {
        self.$emit('shown', warnings);
      }

      self.bpmnViewer.get('canvas').zoom('fit-viewport');
    });

    if (this.url) {
      this.fetchDiagram(this.url);
    }
  },
  beforeDestroy: function() {
    this.bpmnViewer.destroy();
  },
  watch: {
    url: function(val) {
      this.$emit('loading');
      this.fetchDiagram(url);
    },
    diagramXML: function(val) {
      this.bpmnViewer.importXML(val);
    }
  },
  methods: {
    fetchDiagram: function(url) {

      var self = this;

      fetch(url)
        .then(function(response) {
          return response.text();
        })
        .then(function(text) {
          self.diagramXML = text;
        })
        .catch(function(err) {
          self.$emit('error', err);
        });
    }
  }
};

function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier
/* server only */
, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
  if (typeof shadowMode !== 'boolean') {
    createInjectorSSR = createInjector;
    createInjector = shadowMode;
    shadowMode = false;
  } // Vue.extend constructor export interop.


  var options = typeof script === 'function' ? script.options : script; // render functions

  if (template && template.render) {
    options.render = template.render;
    options.staticRenderFns = template.staticRenderFns;
    options._compiled = true; // functional template

    if (isFunctionalTemplate) {
      options.functional = true;
    }
  } // scopedId


  if (scopeId) {
    options._scopeId = scopeId;
  }

  var hook;

  if (moduleIdentifier) {
    // server build
    hook = function hook(context) {
      // 2.3 injection
      context = context || // cached call
      this.$vnode && this.$vnode.ssrContext || // stateful
      this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional
      // 2.2 with runInNewContext: true

      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__;
      } // inject component styles


      if (style) {
        style.call(this, createInjectorSSR(context));
      } // register component module identifier for async chunk inference


      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier);
      }
    }; // used by ssr in case component is cached and beforeCreate
    // never gets called


    options._ssrRegister = hook;
  } else if (style) {
    hook = shadowMode ? function () {
      style.call(this, createInjectorShadow(this.$root.$options.shadowRoot));
    } : function (context) {
      style.call(this, createInjector(context));
    };
  }

  if (hook) {
    if (options.functional) {
      // register for functional component in vue file
      var originalRender = options.render;

      options.render = function renderWithStyleInjection(h, context) {
        hook.call(context);
        return originalRender(h, context);
      };
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate;
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
    }
  }

  return script;
}

var normalizeComponent_1 = normalizeComponent;

var isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
function createInjector(context) {
  return function (id, style) {
    return addStyle(id, style);
  };
}
var HEAD = document.head || document.getElementsByTagName('head')[0];
var styles = {};

function addStyle(id, css) {
  var group = isOldIE ? css.media || 'default' : id;
  var style = styles[group] || (styles[group] = {
    ids: new Set(),
    styles: []
  });

  if (!style.ids.has(id)) {
    style.ids.add(id);
    var code = css.source;

    if (css.map) {
      // https://developer.chrome.com/devtools/docs/javascript-debugging
      // this makes source maps inside style tags work properly in Chrome
      code += '\n/*# sourceURL=' + css.map.sources[0] + ' */'; // http://stackoverflow.com/a/26603875

      code += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) + ' */';
    }

    if (!style.element) {
      style.element = document.createElement('style');
      style.element.type = 'text/css';
      if (css.media) style.element.setAttribute('media', css.media);
      HEAD.appendChild(style.element);
    }

    if ('styleSheet' in style.element) {
      style.styles.push(code);
      style.element.styleSheet.cssText = style.styles.filter(Boolean).join('\n');
    } else {
      var index = style.ids.size - 1;
      var textNode = document.createTextNode(code);
      var nodes = style.element.childNodes;
      if (nodes[index]) style.element.removeChild(nodes[index]);
      if (nodes.length) style.element.insertBefore(textNode, nodes[index]);else style.element.appendChild(textNode);
    }
  }
}

var browser = createInjector;

/* script */
const __vue_script__ = script;

/* template */
var __vue_render__ = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", {
    ref: "container",
    staticClass: "vue-bpmn-diagram-container"
  })
};
var __vue_staticRenderFns__ = [];
__vue_render__._withStripped = true;

  /* style */
  const __vue_inject_styles__ = function (inject) {
    if (!inject) return
    inject("data-v-66ab4612_0", { source: "\n.vue-bpmn-diagram-container {\n  height: 100%;\n  width: 100%;\n}\n", map: {"version":3,"sources":["/home/nikku/camunda/projects/bpmn-io/.other/vue-bpmn/src/index.vue"],"names":[],"mappings":";AAgFA;EACA,YAAA;EACA,WAAA;AACA","file":"index.vue","sourcesContent":["<template>\n  <div ref=\"container\" class=\"vue-bpmn-diagram-container\"></div>\n</template>\n\n<script>\n  import BpmnJS from 'bpmn-js/dist/bpmn-navigated-viewer.production.min.js';\n\n  export default {\n    name: 'vue-bpmn',\n    props: {\n      url: {\n        type: String,\n        required: true\n      }\n    },\n    data: function() {\n      return {\n        diagramXML: null\n      };\n    },\n    mounted: function () {\n      var container = this.$refs.container;\n\n      var self = this;\n\n      this.bpmnViewer = new BpmnJS({\n        container: container\n      });\n\n      this.bpmnViewer.on('import.done', function(event) {\n\n        var error = event.error;\n        var warnings = event.warnings;\n\n        if (error) {\n          self.$emit('error', error);\n        } else {\n          self.$emit('shown', warnings);\n        }\n\n        self.bpmnViewer.get('canvas').zoom('fit-viewport');\n      });\n\n      if (this.url) {\n        this.fetchDiagram(this.url);\n      }\n    },\n    beforeDestroy: function() {\n      this.bpmnViewer.destroy();\n    },\n    watch: {\n      url: function(val) {\n        this.$emit('loading');\n        this.fetchDiagram(url);\n      },\n      diagramXML: function(val) {\n        this.bpmnViewer.importXML(val);\n      }\n    },\n    methods: {\n      fetchDiagram: function(url) {\n\n        var self = this;\n\n        fetch(url)\n          .then(function(response) {\n            return response.text();\n          })\n          .then(function(text) {\n            self.diagramXML = text;\n          })\n          .catch(function(err) {\n            self.$emit('error', err);\n          });\n      }\n    }\n  };\n</script>\n\n<style>\n  .vue-bpmn-diagram-container {\n    height: 100%;\n    width: 100%;\n  }\n</style>\n"]}, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__ = undefined;
  /* module identifier */
  const __vue_module_identifier__ = undefined;
  /* functional template */
  const __vue_is_functional_template__ = false;
  /* style inject SSR */
  

  
  var index = normalizeComponent_1(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    browser,
    undefined
  );

module.exports = index;
